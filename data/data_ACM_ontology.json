{
  "Computer science": {
    "knowledge_areas": [
      {
        "name": "AL-Algorithms and Complexity",
        "description": "Present to a group of peers the data characteristics of conditions or assumptions that can lead to different behaviors of specific algorithms and from the analysis, illustrate empirical studies to validate hypotheses about runtime measures.Illustrate informally the time and space complexity of algorithms and use big-O notation formally to show asymptotic upper bounds and expected case bounds on time and space complexity, respectively. Use recurrence relations to determine the time complexity of recursively defined algorithms by solve elementary recurrence relations and present the results to a group of scholars. Determine an appropriate algorithmic approach to an industry problem and use appropriate techniques (e.g., greedy approach, divide-and-conquer algorithm, recursive backtracking, dynamic programming, or heuristic approach) that considers the tradeoffs between the brute force to solve a problem. Implement basic numerical algorithm methods (e.g., search algorithms, common quadratic and O(N log N) sorting algorithms, fundamental graph algorithms, string-matching algorithm) to solve an industry problem and select the appreciate algorithm for a particular context. Design a deterministic finite state machine for a local engineering firm that accepts a specified language and generates a regular expression to represent the language."
      },
      {
        "name": "AR-Architecture and Organization",
        "description": "Use CAD tools for capture, synthesis, and simulation to evaluate simple building blocks of a simple computer design for a local engineering company. Evaluate the timing diagram behavior of a simple processor-implemented at the logic circuit level and develop a report expressing the findings. Write a simple program at the assembly/machine level for string processing and manipulation and for converting numerical data into hexadecimal form. Implement a fundamental high-level construct in both machine and assembly languages and present the results to a group of peers. Calculate the average memory access time under a variety of cache and memory configurations and develop a short report of the findings."
      },
      {
        "name": "CN-Computational Science",
        "description": "Create a simple, formal mathematical model of a real-world situation and use that model in a simulation for a local technology company. Analyze the problem statement to extract relevant data and processing requirements, and develop workflows to represent computational processes, such as visualizing experimental data. Implement algorithms for solving numerical problems, including interpolation, integration, and differential equations. Validate the model and simulation results, addressing computational precision issues such as round-off and truncation errors. Present findings using data visualization techniques to support decision-making."
      },
      {
        "name": "DS-Discrete Structures",
        "description": "Present to a peer group some practical examples of an appropriate set, function, or relation model, and interpret the associated operations and terminology in context. Use symbolic propositional and predicate logic to model a real-life industry application by applying formal methods (e.g., calculating the validity of formulae and computing normal forms to the symbolic logic). Apply rules of inference to construct proofs and present results to a group of professionals, appropriate proofs, or logical reasoning to solve a strategic problem. Map real-world applications to appropriate counting formalisms and apply basic counting theories (e.g., counting arguments, the pigeonhole principle, modular arithmetic as well as compute permutations and combinations of a set) to solve an industry problem. Analyze an industry problem to determine underlying recurrence relations and present the solution to professionals by using a variety of basic recurrence relations. Model a real-world problem using appropriate graphing strategies (e.g., trees, traversal methods for graphs and trees, spanning trees of a graph) and determine whether two graph approaches are isomorphic. Calculate different probabilities of dependent or independent events and expectations of random variables to solve a problem and present to a group of peers the ways to compute the variance for a given probability distribution."
      },
      {
        "name": "GV-Graphics and Visualization",
        "description": "Design and develop a user interface using a standard API, incorporating visual and auditory techniques to improve accessibility and user experience for a local organization. The course focuses on applying principles of human-computer interaction, leveraging graphics and visualization techniques for effective data representation, and integrating audio feedback for enhanced usability. Students will learn to create intuitive and aesthetically pleasing interfaces, using industry-standard tools and frameworks, while considering real-world constraints and user needs."
      },
      {
        "name": "HCI-Human-Computer Interaction",
        "description": "Design an interactive application, applying a user-centered design cycle with related tools and techniques (modes, navigation, visual design), to optimize usability and user experience within a corporate environment. Analyze and evaluate a user interface that considers the context of use, stakeholder needs, state-of-the-art response interaction times, design modalities taking into consideration universal access, inclusiveness, assistive technologies, and culture-sensitive design. Design and develop an interactive application for a local charity, applying a user-centered design cycle with related vocabulary, tools, and techniques that optimize usability and user experience. Create and conduct a simple usability test to analyze and evaluate a user interface that considers the context of use taking into consideration universal access and culturally sensitive design. Create a simple application, together with help and documentation, that supports a graphical user interface for an enterprise and conduct a quantitative evaluation and report the results."
      },
      {
        "name": "IAS-Information Assurance and Security",
        "description": "Write the correct input validation code for a cybersecurity company after classifying common input validation errors. Demonstrate to a group of security professionals some ways to prevent a race condition from occurring and ways to handle exceptions. The course emphasizes principles of information assurance and security, including ensuring confidentiality, integrity, and availability of systems, and providing authentication and non-repudiation. Students will explore the technical and policy controls necessary to defend against threats and validate the accuracy and reliability of data and processes, preparing them for real-world cybersecurity challenges."
      },
      {
        "name": "IM-Information Management",
        "description": "Contrast information with data and knowledge and describe to a group of professionals the advantages and disadvantages of centralized data control. Demonstrate to a group of peers a declarative query language to elicit information from a database. Contrast appropriate data models, including internal structures, for different types of data, and present an application to a group of professionals for the use of modeling concepts and notation of the relational data model."
      },
      {
        "name": "IS-Intelligent Systems",
        "description": "Determine the characteristics of a given problem that an intelligent system must solve and present the results to a project team. Formulate an industry problem specified in a natural language (e.g., English) as a constraint satisfaction problem and implement it using an appropriate technique (e.g., chronological backtracking algorithm or stochastic local search). Implement an appropriate uninformed or informed search algorithm for an industry problem by characterizing time and space complexities of informed algorithm or designing the necessary heuristic evaluation function for an uninformed search algorithm to guarantee an optimal solution, respectively. Translate a natural language (e.g., English) sentence for a corporate query system into a predicate logic statement by converting a logic statement into clause form and applying resolution to a set of logic statements to answer a query. Make a probabilistic inference in a real-world industry problem using Bayes’ theorem to determine the probability of a hypothesis given evidence."
      },
      {
        "name": "NC-Networking and Communication",
        "description": "Design and develop for a corporate customer a simple client-server socket-based application. Design and implement a simple reliable protocol for an industry network by considering factors that affect the network’s performance. Contrast fixed and dynamic allocation techniques as well as current approaches to congestion and present the results to company executives."
      },
      {
        "name": "OS-Operating Systems",
        "description": "Apply knowledge of computing theory and mathematics to solve problems and present comprehensively the results and methods of the solution for either a professional or non-professional audience. Implement software solutions within system constraints of a target system considering its abilities and constraints, and document and explain the implementation to both technical and non-technical audiences. Predict the behavior of systems under random events using knowledge of probability and expectation and inform users of its potential behavior. Assess the security of a system using the knowledge of confidentiality, availability, and integrity with an understanding of risks, threats, vulnerabilities, and attack vectors, and relate its societal and ethical impact to the system's constituents."
      },
      {
        "name": "PBD-Platform-based Development",
        "description": "Design for a client a responsive web application utilizing a web framework and presentation technologies in support of a diverse online community. Develop a mobile app for a company that is usable, efficient, and secure on more than one device. Simulate for a company an industry platform. Develop and implement programming tasks via platform-specific APIs and present the results to a group of peers. Present the analysis of a mobile industrial system and illustrate correct security vulnerabilities."
      },
      {
        "name": "PD-Parallel and Distributed Computing",
        "description": "Design a scalable parallel algorithm for a computer firm by applying task-based decomposition or data-parallel decomposition. Write a program for a client that correctly terminates when all concurrent tasks terminate by considering actors and/or reactive processes, deadlocks, and properly synchronized queues. Write a test program for a company that reveals a concurrent programming error (e.g., missing an update when two activities both try to increment a variable). Present computational results of the work and span in a program by identifying independent tasks that may be parallelized and determining the critical path for a parallel execution diagram. Implement a parallel divide-and-conquer (and/or graph algorithm) for a client by mapping and reducing operations for the real industry problem and empirically measure its performance relative to its sequential analog."
      },
      {
        "name": "PL-Programming Languages",
        "description": "Present the design and implementation of a class considering object-oriented encapsulation mechanisms (e.g., class hierarchies, interfaces, and private members). Produce a brief report on the implementation of a basic algorithm considering control flow in a program using dynamic dispatch that avoids assigning to a mutable state (or considering reference equality) for two different languages. Present the implementation of a useful function that takes and returns other functions considering variables and lexical scope in a program as well as functional encapsulation mechanisms. Use iterators and other operations on aggregates (including operations that take functions as arguments) in two programming languages and present to a group of professionals some ways of selecting the most natural idioms for each language. Contrast and present to peers (1) the procedural/functional approach (defining a function for each operation with the function body providing a case for each data variant) and (2) the object-oriented approach (defining a class for each data variant with the class definition providing a method for each operation). Write event handlers for a web developer for use in reactive systems such as GUIs. Demonstrate program pieces (such as functions, classes, methods) that use generic or compound types, including for collections to write programs. Write a program for a client to process a representation of code that illustrates the incorporation of an interpreter, an expression optimizer, and a documentation generator. Use type-error messages, memory leaks, and dangling-pointer to debug a program for an engineering firm."
      },
      {
        "name": "SDF-Software Development Fundamentals",
        "description": "Create an appropriate algorithm to illustrate iterative, recursive functions, as well as divide-and-conquer techniques and use a programming language to implement, test, and debug the algorithm for solving a simple industry problem. Decompose a program for a client that identifies the data components and behaviors of multiple abstract data types and implementing a coherent abstract data type, with loose coupling between components and behaviors. Design, implement, test, and debug an industry program that uses fundamental programming constructs including basic computation, simple and file I/O, standard conditional and iterative structures, the definition of functions, and parameter passing. Present the costs and benefits of dynamic and static data structure implementations, choosing the appropriate data structure for modeling a given engineering problem. Apply consistent documentation and program style standards for a software engineering company that contribute to the readability and maintainability of software, conducting a personal and small-team code review on program component using a provided checklist. Demonstrate common coding errors, constructing and debugging programs using the standard libraries available with a chosen programming language. Refactor an industry program by identifying opportunities to apply procedural abstraction."
      },
      {
        "name": "SE-Software Engineering",
        "description": "Conduct a review of a set of software requirements for a local project, distinguishing between functional and non-functional requirements, and evaluate the extent to which the set exhibits the characteristics of good requirements. Present to a client the design of a simple software system using a modeling notation (such as UML), including an explanation of how the design incorporated system design principles."
      },
      {
        "name": "SF-Systems Fundamentals",
        "description": "Design a simple sequential problem and a parallel version of the same problem using fundamental building blocks of logic design and use appropriate tools to evaluate the design for a commercial organization and evaluate both problem versions. Develop a program for a local organization that incorporated error detection and recovery that incorporates appropriate tools for program tracing and debugging. Design a simple parallel program for a corporation that manages shared resources through synchronization primitives and use tools to evaluate program performance. Design and conduct a performance-oriented, pattern recognition experiment incorporating state machine descriptors and simple schedule algorithms for exploiting redundant information and data correction that is usable for a local engineering company and use appropriate tools to measure program performance. Calculate average memory access time and describe the tradeoffs in memory hierarchy performance in terms of capacity, miss/hit rate, and access time for a local engineering company. Measure the performance of two application instances running on separate virtual machines at a local engineering company and determine the effect of performance isolation."
      },
      {
        "name": "SP-Social Issues and Professional Practice",
        "description": "Perform a system analysis for a local organization and present the results to them in a non-technical way. Integrate interdisciplinary knowledge to develop a program for a local organization. Document industry trends, innovations, and new technologies and produce a report to influence a targeted workspace. Present to a group of professionals an innovative computer system by using audience-specific language and examples to illustrate the group's needs. Produce a document that is helpful to others that addresses the effect of societal change due to technology. Adopt processes to track customer requests, needs, and satisfaction. Compare different error detection and correction methods for their data overhead, implementation complexity, and relative execution time for encoding, detecting, and correcting errors and ensure that any error does not affect humans adversely."
      }
    ]
  },
  "Information technology": {
    "knowledge_areas": [
      {
        "name": "ITE-CSP Cybersecurity Principles",
        "description": "Evaluate the purpose and function of cybersecurity technology identifying the tools and systems that reduce the risk of data breaches while enabling vital organization practices. (Cybersecurity functions). Implement systems, apply tools, and use concepts to minimize the risk to an organization’s cyberspace to address cybersecurity threats. (Tools and threats). Use a risk management approach for responding to and recovering from a cyber-attack on a system that contains high-value information and assets such as an email system. (Response and risks). Develop policies and procedures needed to respond and remediate a cyber-attack on a credit card system and describe a plan to restore functionality to the infrastructure. (Policies and procedures)"
      },
       {
        "name": "ITE-GPP Global Professional Practice",
        "description": "Analyze the importance of communication skills in a team environment and determine how these skills contribute to the optimization of organization goals. (Communication and teamwork). Evaluate the specific skills necessary for maintaining continued employment in an IT career that involves system development in an environmental context. (Employability). Develop IT policies within an organization that include privacy, legal, and ethical considerations as they relate to a corporate setting. (Legal and ethical). Evaluate related issues facing an IT project and develop a project plan using a cost/benefit analysis including risk considerations in creating an effective project plan from its start to its completion. (Project management)"
      },
       {
        "name": "ITE-IMA Information Management",
        "description": "Express how the growth of the internet and demands for information have changed data handling and transactional and analytical processing and led to the creation of special-purpose databases. (Requirements). Design and implement a physical model based on appropriate organization rules for a given scenario including the impact of normalization and indexes. (Requirements and development). Create working SQL statements for simple and intermediate queries to create and modify data and database objects to store, manipulate, and analyze enterprise data. (Testing and performance). Analyze ways data fragmentation, replication, and allocation affect database performance in an enterprise environment. (Integration and evaluation). Perform major database administration tasks such as create and manage database users, roles and privileges, backup, and restore database objects to ensure organizational efficiency, continuity, and information security. (Testing and performance)"
      },
       {
        "name": "ITE-IST Integrated Systems Technology",
        "description": "Illustrate how to code and store characters, images, and other forms of data in computers and show why data conversion is often a necessity when merging disparate computing systems. (Data mapping and exchange). Show how a commonly used intersystem communication protocol works, including its advantages and disadvantages. (Intersystem communication protocols). Design, debug and test a script that includes selection, repetition, and parameter passing. (Integrative programming and scripting). Illustrate the goals of secure coding and show how to use these goals as guideposts in dealing with preventing buffer overflow, wrapper code, and securing method access. (Defensible integration)"
      },
       {
        "name": "ITE-NET Networking",
        "description": "Analyze and compare the characteristics of various communication protocols and how they support application requirements within a telecommunication system. (Requirements and Technologies). Analyze and compare several networking topologies in terms of robustness, expandability, and throughput used within a cloud enterprise. (Technologies). Describe different network standards, components, and requirements of network protocols within a distributed computing setting. (Network protocol technologies). Produce managerial policies to address server breakdown issues within a banking system. (Risk Management). Explain different main issues related to network management. (Network Management)"
      },
       {
        "name": "ITE-PFT Platform Technologies",
        "description": "Describe how the historical development of hardware and operating system computing platforms produced the computing systems we have today. (Computing systems). Show how to choose among operating system options, and install at least an operating system on a computer device. (Operating systems). Justify the need for power and heat budgets within an IT environment, and document the factors needed when considering power and heat in a computing system. (Computing infrastructure). Produce a block diagram, including interconnections, of the main parts of a computer, and illustrate methods used on a computer for storing and retrieving data. (Architecture and organization)"
      },
       {
        "name": "ITE-SPA System Paradigms",
        "description": "Justify the way IT systems within an organization can represent stakeholders using different architectures and the ways these architectures relate to a system lifecycle. (Requirements and development). Demonstrate a procurement process for software and hardware acquisition and explain the procedures one might use for testing the critical issues that could affect IT system performance. (Testing and performance). Evaluate integration choices for middleware platforms and demonstrate how these choices affect testing and evaluation within the development of an IT system. (Integration and evaluation). Use knowledge of information technology and sensitivity to the goals and constraints of the organization to develop and monitor effective and appropriate system administration policies within a government environment. (System governance). Develop and implement procedures and employ technologies to achieve administrative policies within a corporate environment. (Operational activities). Organize personnel and information technology resources into appropriate administrative domains in a technical center. (Operational domains). Use appropriate and emerging technologies to improve performance of systems and discover the cause of performance problems in a system. (Performance analysis)"
      },
       {
        "name": "ITE-SWF Software Fundamentals",
        "description": "Use multiple levels of abstraction and select appropriate data structures to create a new program that is socially relevant and requires teamwork. (Program development). Evaluate how to write a program in terms of program style, intended behavior on specific inputs, correctness of program components, and descriptions of program functionality. (App development practices). Develop algorithms to solve a computational problem and explain how programs implement algorithms in terms of instruction processing, program execution, and running processes. (Algorithm development). Collaborate in the creation of an interesting and relevant app (mobile or web) based on user experience design, functionality, and security analysis and build the app’s program using standard libraries, unit testing tools, and collaborative version control. (App development practices)"
      },
       {
        "name": "ITE-UXD User Experience Design",
        "description": "Design an interactive application, applying a user-centered design cycle and related tools and techniques (e.g., prototyping), aiming at usability and relevant user experience within a corporate environment. (Design tools and techniques). For a case of user centered design, analyze and evaluate the context of use, stakeholder needs, state-of-the-art interaction opportunities, and envisioned solutions, considering user attitude and applying relevant tools and techniques (e.g., heuristic evaluation), aiming at universal access and inclusiveness, and showing a responsive design attitude, considering assistive technologies and culture sensitive design. (Stakeholder needs). For evaluation of user-centered design, articulate evaluation criteria and compliance to relevant standards (Benchmarks and standards). In design and analysis, apply knowledge from related disciplines including human information processing, anthropology and ethnography, and ergonomics/human factors. (Integrative design). Apply experience design for a service domain related to several disciplines, focusing on multiple stakeholders and collaborating in an interdisciplinary design team. (Application design)"
      },
       {
        "name": "ITE-WMS Web and Mobile Systems",
        "description": "Design a responsive web application utilizing a web framework and presentation technologies in support of a diverse online community. (Web application development). Develop a mobile app that is usable, efficient, and secure on more than one device. (Mobile app development). Analyze a web or mobile system and correct security vulnerabilities. (Web and mobile security). Implement storage, transfer, and retrieval of digital media in a web application with appropriate file, database, or streaming formats. (Digital media storage and transfer). Describe the major components of a web system and how they function together, including the web server, database, analytics, and front end. (Web system infrastructure)"
      }
    ]
  }
}