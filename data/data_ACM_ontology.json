{
  "Computer science": {
    "knowledge_areas": [
      {
        "name": "AL-Algorithms and Complexity",
        "description": "Present to a group of peers the data characteristics of conditions or assumptions that can lead to different behaviors of specific algorithms and from the analysis, illustrate empirical studies to validate hypotheses about runtime measures.Illustrate informally the time and space complexity of algorithms and use big-O notation formally to show asymptotic upper bounds and expected case bounds on time and space complexity, respectively. Use recurrence relations to determine the time complexity of recursively defined algorithms by solve elementary recurrence relations and present the results to a group of scholars. Determine an appropriate algorithmic approach to an industry problem and use appropriate techniques (e.g., greedy approach, divide-and-conquer algorithm, recursive backtracking, dynamic programming, or heuristic approach) that considers the tradeoffs between the brute force to solve a problem. Implement basic numerical algorithm methods (e.g., search algorithms, common quadratic and O(N log N) sorting algorithms, fundamental graph algorithms, string-matching algorithm) to solve an industry problem and select the appreciate algorithm for a particular context. Design a deterministic finite state machine for a local engineering firm that accepts a specified language and generates a regular expression to represent the language."
      },
      {
        "name": "AR-Architecture and Organization",
        "description": "Use CAD tools for capture, synthesis, and simulation to evaluate simple building blocks of a simple computer design for a local engineering company. Evaluate the timing diagram behavior of a simple processor-implemented at the logic circuit level and develop a report expressing the findings. Write a simple program at the assembly/machine level for string processing and manipulation and for converting numerical data into hexadecimal form. Implement a fundamental high-level construct in both machine and assembly languages and present the results to a group of peers. Calculate the average memory access time under a variety of cache and memory configurations and develop a short report of the findings."
      },
      {
        "name": "CN-Computational Science",
        "description": "Create a simple, formal mathematical model of a real-world situation and use that model in a simulation for a local technology company. Analyze the problem statement to extract relevant data and processing requirements, and develop workflows to represent computational processes, such as visualizing experimental data. Implement algorithms for solving numerical problems, including interpolation, integration, and differential equations. Validate the model and simulation results, addressing computational precision issues such as round-off and truncation errors. Present findings using data visualization techniques to support decision-making."
      },
      {
        "name": "DS-Discrete Structures",
        "description": "Present to a peer group some practical examples of an appropriate set, function, or relation model, and interpret the associated operations and terminology in context. Use symbolic propositional and predicate logic to model a real-life industry application by applying formal methods (e.g., calculating the validity of formulae and computing normal forms to the symbolic logic). Apply rules of inference to construct proofs and present results to a group of professionals, appropriate proofs, or logical reasoning to solve a strategic problem. Map real-world applications to appropriate counting formalisms and apply basic counting theories (e.g., counting arguments, the pigeonhole principle, modular arithmetic as well as compute permutations and combinations of a set) to solve an industry problem. Analyze an industry problem to determine underlying recurrence relations and present the solution to professionals by using a variety of basic recurrence relations. Model a real-world problem using appropriate graphing strategies (e.g., trees, traversal methods for graphs and trees, spanning trees of a graph) and determine whether two graph approaches are isomorphic. Calculate different probabilities of dependent or independent events and expectations of random variables to solve a problem and present to a group of peers the ways to compute the variance for a given probability distribution."
      },
      {
        "name": "GV-Graphics and Visualization",
        "description": "Design and develop a user interface using a standard API, incorporating visual and auditory techniques to improve accessibility and user experience for a local organization. The course focuses on applying principles of human-computer interaction, leveraging graphics and visualization techniques for effective data representation, and integrating audio feedback for enhanced usability. Students will learn to create intuitive and aesthetically pleasing interfaces, using industry-standard tools and frameworks, while considering real-world constraints and user needs."
      },
      {
        "name": "HCI-Human-Computer Interaction",
        "description": "Design an interactive application, applying a user-centered design cycle with related tools and techniques (modes, navigation, visual design), to optimize usability and user experience within a corporate environment. Analyze and evaluate a user interface that considers the context of use, stakeholder needs, state-of-the-art response interaction times, design modalities taking into consideration universal access, inclusiveness, assistive technologies, and culture-sensitive design. Design and develop an interactive application for a local charity, applying a user-centered design cycle with related vocabulary, tools, and techniques that optimize usability and user experience. Create and conduct a simple usability test to analyze and evaluate a user interface that considers the context of use taking into consideration universal access and culturally sensitive design. Create a simple application, together with help and documentation, that supports a graphical user interface for an enterprise and conduct a quantitative evaluation and report the results."
      },
      {
        "name": "IAS-Information Assurance and Security",
        "description": "Write the correct input validation code for a cybersecurity company after classifying common input validation errors. Demonstrate to a group of security professionals some ways to prevent a race condition from occurring and ways to handle exceptions. The course emphasizes principles of information assurance and security, including ensuring confidentiality, integrity, and availability of systems, and providing authentication and non-repudiation. Students will explore the technical and policy controls necessary to defend against threats and validate the accuracy and reliability of data and processes, preparing them for real-world cybersecurity challenges."
      },
      {
        "name": "IM-Information Management",
        "description": "Contrast information with data and knowledge and describe to a group of professionals the advantages and disadvantages of centralized data control. Demonstrate to a group of peers a declarative query language to elicit information from a database. Contrast appropriate data models, including internal structures, for different types of data, and present an application to a group of professionals for the use of modeling concepts and notation of the relational data model."
      },
      {
        "name": "IS-Intelligent Systems",
        "description": "Determine the characteristics of a given problem that an intelligent system must solve and present the results to a project team. Formulate an industry problem specified in a natural language (e.g., English) as a constraint satisfaction problem and implement it using an appropriate technique (e.g., chronological backtracking algorithm or stochastic local search). Implement an appropriate uninformed or informed search algorithm for an industry problem by characterizing time and space complexities of informed algorithm or designing the necessary heuristic evaluation function for an uninformed search algorithm to guarantee an optimal solution, respectively. Translate a natural language (e.g., English) sentence for a corporate query system into a predicate logic statement by converting a logic statement into clause form and applying resolution to a set of logic statements to answer a query. Make a probabilistic inference in a real-world industry problem using Bayes’ theorem to determine the probability of a hypothesis given evidence."
      },
      {
        "name": "NC-Networking and Communication",
        "description": "Design and develop for a corporate customer a simple client-server socket-based application. Design and implement a simple reliable protocol for an industry network by considering factors that affect the network’s performance. Contrast fixed and dynamic allocation techniques as well as current approaches to congestion and present the results to company executives."
      },
      {
        "name": "OS-Operating Systems",
        "description": "Apply knowledge of computing theory and mathematics to solve problems and present comprehensively the results and methods of the solution for either a professional or non-professional audience. Implement software solutions within system constraints of a target system considering its abilities and constraints, and document and explain the implementation to both technical and non-technical audiences. Predict the behavior of systems under random events using knowledge of probability and expectation and inform users of its potential behavior. Assess the security of a system using the knowledge of confidentiality, availability, and integrity with an understanding of risks, threats, vulnerabilities, and attack vectors, and relate its societal and ethical impact to the system's constituents."
      },
      {
        "name": "PBD-Platform-based Development",
        "description": "Design for a client a responsive web application utilizing a web framework and presentation technologies in support of a diverse online community. Develop a mobile app for a company that is usable, efficient, and secure on more than one device. Simulate for a company an industry platform. Develop and implement programming tasks via platform-specific APIs and present the results to a group of peers. Present the analysis of a mobile industrial system and illustrate correct security vulnerabilities."
      },
      {
        "name": "PD-Parallel and Distributed Computing",
        "description": "Design a scalable parallel algorithm for a computer firm by applying task-based decomposition or data-parallel decomposition. Write a program for a client that correctly terminates when all concurrent tasks terminate by considering actors and/or reactive processes, deadlocks, and properly synchronized queues. Write a test program for a company that reveals a concurrent programming error (e.g., missing an update when two activities both try to increment a variable). Present computational results of the work and span in a program by identifying independent tasks that may be parallelized and determining the critical path for a parallel execution diagram. Implement a parallel divide-and-conquer (and/or graph algorithm) for a client by mapping and reducing operations for the real industry problem and empirically measure its performance relative to its sequential analog."
      },
      {
        "name": "PL-Programming Languages",
        "description": "Present the design and implementation of a class considering object-oriented encapsulation mechanisms (e.g., class hierarchies, interfaces, and private members). Produce a brief report on the implementation of a basic algorithm considering control flow in a program using dynamic dispatch that avoids assigning to a mutable state (or considering reference equality) for two different languages. Present the implementation of a useful function that takes and returns other functions considering variables and lexical scope in a program as well as functional encapsulation mechanisms. Use iterators and other operations on aggregates (including operations that take functions as arguments) in two programming languages and present to a group of professionals some ways of selecting the most natural idioms for each language. Contrast and present to peers (1) the procedural/functional approach (defining a function for each operation with the function body providing a case for each data variant) and (2) the object-oriented approach (defining a class for each data variant with the class definition providing a method for each operation). Write event handlers for a web developer for use in reactive systems such as GUIs. Demonstrate program pieces (such as functions, classes, methods) that use generic or compound types, including for collections to write programs. Write a program for a client to process a representation of code that illustrates the incorporation of an interpreter, an expression optimizer, and a documentation generator. Use type-error messages, memory leaks, and dangling-pointer to debug a program for an engineering firm."
      },
      {
        "name": "SDF-Software Development Fundamentals",
        "description": "Create an appropriate algorithm to illustrate iterative, recursive functions, as well as divide-and-conquer techniques and use a programming language to implement, test, and debug the algorithm for solving a simple industry problem. Decompose a program for a client that identifies the data components and behaviors of multiple abstract data types and implementing a coherent abstract data type, with loose coupling between components and behaviors. Design, implement, test, and debug an industry program that uses fundamental programming constructs including basic computation, simple and file I/O, standard conditional and iterative structures, the definition of functions, and parameter passing. Present the costs and benefits of dynamic and static data structure implementations, choosing the appropriate data structure for modeling a given engineering problem. Apply consistent documentation and program style standards for a software engineering company that contribute to the readability and maintainability of software, conducting a personal and small-team code review on program component using a provided checklist. Demonstrate common coding errors, constructing and debugging programs using the standard libraries available with a chosen programming language. Refactor an industry program by identifying opportunities to apply procedural abstraction."
      },
      {
        "name": "SE-Software Engineering",
        "description": "Conduct a review of a set of software requirements for a local project, distinguishing between functional and non-functional requirements, and evaluate the extent to which the set exhibits the characteristics of good requirements. Present to a client the design of a simple software system using a modeling notation (such as UML), including an explanation of how the design incorporated system design principles."
      },
      {
        "name": "SF-Systems Fundamentals",
        "description": "Design a simple sequential problem and a parallel version of the same problem using fundamental building blocks of logic design and use appropriate tools to evaluate the design for a commercial organization and evaluate both problem versions. Develop a program for a local organization that incorporated error detection and recovery that incorporates appropriate tools for program tracing and debugging. Design a simple parallel program for a corporation that manages shared resources through synchronization primitives and use tools to evaluate program performance. Design and conduct a performance-oriented, pattern recognition experiment incorporating state machine descriptors and simple schedule algorithms for exploiting redundant information and data correction that is usable for a local engineering company and use appropriate tools to measure program performance. Calculate average memory access time and describe the tradeoffs in memory hierarchy performance in terms of capacity, miss/hit rate, and access time for a local engineering company. Measure the performance of two application instances running on separate virtual machines at a local engineering company and determine the effect of performance isolation."
      },
      {
        "name": "SP-Social Issues and Professional Practice",
        "description": "Perform a system analysis for a local organization and present the results to them in a non-technical way. Integrate interdisciplinary knowledge to develop a program for a local organization. Document industry trends, innovations, and new technologies and produce a report to influence a targeted workspace. Present to a group of professionals an innovative computer system by using audience-specific language and examples to illustrate the group's needs. Produce a document that is helpful to others that addresses the effect of societal change due to technology. Adopt processes to track customer requests, needs, and satisfaction. Compare different error detection and correction methods for their data overhead, implementation complexity, and relative execution time for encoding, detecting, and correcting errors and ensure that any error does not affect humans adversely."
      }
    ]
  },
  "Information technology": {
    "knowledge_areas": [
      {
        "name": "ITE-CSP Cybersecurity Principles",
        "description": "Evaluate the purpose and function of cybersecurity technology identifying the tools and systems that reduce the risk of data breaches while enabling vital organization practices. (Cybersecurity functions). Implement systems, apply tools, and use concepts to minimize the risk to an organization’s cyberspace to address cybersecurity threats. (Tools and threats). Use a risk management approach for responding to and recovering from a cyber-attack on a system that contains high-value information and assets such as an email system. (Response and risks). Develop policies and procedures needed to respond and remediate a cyber-attack on a credit card system and describe a plan to restore functionality to the infrastructure. (Policies and procedures)"
      },
      {
        "name": "ITE-GPP Global Professional Practice",
        "description": "Analyze the importance of communication skills in a team environment and determine how these skills contribute to the optimization of organization goals. (Communication and teamwork). Evaluate the specific skills necessary for maintaining continued employment in an IT career that involves system development in an environmental context. (Employability). Develop IT policies within an organization that include privacy, legal, and ethical considerations as they relate to a corporate setting. (Legal and ethical). Evaluate related issues facing an IT project and develop a project plan using a cost/benefit analysis including risk considerations in creating an effective project plan from its start to its completion. (Project management)"
      },
      {
        "name": "ITE-IMA Information Management",
        "description": "Express how the growth of the internet and demands for information have changed data handling and transactional and analytical processing and led to the creation of special-purpose databases. (Requirements). Design and implement a physical model based on appropriate organization rules for a given scenario including the impact of normalization and indexes. (Requirements and development). Create working SQL statements for simple and intermediate queries to create and modify data and database objects to store, manipulate, and analyze enterprise data. (Testing and performance). Analyze ways data fragmentation, replication, and allocation affect database performance in an enterprise environment. (Integration and evaluation). Perform major database administration tasks such as create and manage database users, roles and privileges, backup, and restore database objects to ensure organizational efficiency, continuity, and information security. (Testing and performance)"
      },
      {
        "name": "ITE-IST Integrated Systems Technology",
        "description": "Illustrate how to code and store characters, images, and other forms of data in computers and show why data conversion is often a necessity when merging disparate computing systems. (Data mapping and exchange). Show how a commonly used intersystem communication protocol works, including its advantages and disadvantages. (Intersystem communication protocols). Design, debug and test a script that includes selection, repetition, and parameter passing. (Integrative programming and scripting). Illustrate the goals of secure coding and show how to use these goals as guideposts in dealing with preventing buffer overflow, wrapper code, and securing method access. (Defensible integration)"
      },
      {
        "name": "ITE-NET Networking",
        "description": "Analyze and compare the characteristics of various communication protocols and how they support application requirements within a telecommunication system. (Requirements and Technologies). Analyze and compare several networking topologies in terms of robustness, expandability, and throughput used within a cloud enterprise. (Technologies). Describe different network standards, components, and requirements of network protocols within a distributed computing setting. (Network protocol technologies). Produce managerial policies to address server breakdown issues within a banking system. (Risk Management). Explain different main issues related to network management. (Network Management)"
      },
      {
        "name": "ITE-PFT Platform Technologies",
        "description": "Describe how the historical development of hardware and operating system computing platforms produced the computing systems we have today. (Computing systems). Show how to choose among operating system options, and install at least an operating system on a computer device. (Operating systems). Justify the need for power and heat budgets within an IT environment, and document the factors needed when considering power and heat in a computing system. (Computing infrastructure). Produce a block diagram, including interconnections, of the main parts of a computer, and illustrate methods used on a computer for storing and retrieving data. (Architecture and organization)"
      },
      {
        "name": "ITE-SPA System Paradigms",
        "description": "Justify the way IT systems within an organization can represent stakeholders using different architectures and the ways these architectures relate to a system lifecycle. (Requirements and development). Demonstrate a procurement process for software and hardware acquisition and explain the procedures one might use for testing the critical issues that could affect IT system performance. (Testing and performance). Evaluate integration choices for middleware platforms and demonstrate how these choices affect testing and evaluation within the development of an IT system. (Integration and evaluation). Use knowledge of information technology and sensitivity to the goals and constraints of the organization to develop and monitor effective and appropriate system administration policies within a government environment. (System governance). Develop and implement procedures and employ technologies to achieve administrative policies within a corporate environment. (Operational activities). Organize personnel and information technology resources into appropriate administrative domains in a technical center. (Operational domains). Use appropriate and emerging technologies to improve performance of systems and discover the cause of performance problems in a system. (Performance analysis)"
      },
      {
        "name": "ITE-SWF Software Fundamentals",
        "description": "Use multiple levels of abstraction and select appropriate data structures to create a new program that is socially relevant and requires teamwork. (Program development). Evaluate how to write a program in terms of program style, intended behavior on specific inputs, correctness of program components, and descriptions of program functionality. (App development practices). Develop algorithms to solve a computational problem and explain how programs implement algorithms in terms of instruction processing, program execution, and running processes. (Algorithm development). Collaborate in the creation of an interesting and relevant app (mobile or web) based on user experience design, functionality, and security analysis and build the app’s program using standard libraries, unit testing tools, and collaborative version control. (App development practices)"
      },
      {
        "name": "ITE-UXD User Experience Design",
        "description": "Design an interactive application, applying a user-centered design cycle and related tools and techniques (e.g., prototyping), aiming at usability and relevant user experience within a corporate environment. (Design tools and techniques). For a case of user centered design, analyze and evaluate the context of use, stakeholder needs, state-of-the-art interaction opportunities, and envisioned solutions, considering user attitude and applying relevant tools and techniques (e.g., heuristic evaluation), aiming at universal access and inclusiveness, and showing a responsive design attitude, considering assistive technologies and culture sensitive design. (Stakeholder needs). For evaluation of user-centered design, articulate evaluation criteria and compliance to relevant standards (Benchmarks and standards). In design and analysis, apply knowledge from related disciplines including human information processing, anthropology and ethnography, and ergonomics/human factors. (Integrative design). Apply experience design for a service domain related to several disciplines, focusing on multiple stakeholders and collaborating in an interdisciplinary design team. (Application design)"
      },
      {
        "name": "ITE-WMS Web and Mobile Systems",
        "description": "Design a responsive web application utilizing a web framework and presentation technologies in support of a diverse online community. (Web application development). Develop a mobile app that is usable, efficient, and secure on more than one device. (Mobile app development). Analyze a web or mobile system and correct security vulnerabilities. (Web and mobile security). Implement storage, transfer, and retrieval of digital media in a web application with appropriate file, database, or streaming formats. (Digital media storage and transfer). Describe the major components of a web system and how they function together, including the web server, database, analytics, and front end. (Web system infrastructure)"
      }
    ]
  },
  "Cybesecurity": {
    "knowledge_areas": [
      {
        "name": "Data Security",
        "description": "The Data Security knowledge area focuses on the protection of data at rest, duringprocessing, and in transit. This knowledge area requires the application of mathematicaland analytical algorithms to fully implement. Learning outcomes: Describe the purpose of cryptography and list ways it is used in data communications. Describe the following terms: cipher, cryptanalysis, cryptographic algorithm, and cryptology, and describe the two basic methods (ciphers) for transforming plaintext in ciphertext. Explain how public key infrastructure supports digital signing and encryption and discuss the limitations/vulnerabilities. Discuss the dangers of inventing one’s own cryptographic methods. Describe which cryptographic protocols, tools and techniques are appropriate for a given situation. Explain the goals of end-to-end data security. Describe what a digital investigation is, the sources of digital evidence, and the limitations of forensics. Compare and contrast variety of forensics tools. Explain the concepts of authentication, authorization, access control, and data integrity. Explain the various authentication techniques and their strengths and weaknesses. Explain the various possible attacks on passwords."
      },
      {
        "name": "Software Security",
        "description": "The Software Security knowledge area focuses on the development and use of software that reliably preserves the security properties of the information and systems it protects. The security of a system, and of the data it stores and manages, depends in large part on the security of its software. The security of software depends on how well the requirements match the needs that the software is to address, how well the software is designed, implemented, tested, and deployed and maintained. Essentials - Fundamental design principles including least privilege, open design, and abstraction, - Security requirements and their role in design, - Implementation issues, - Static and dynamic testing, - Configuring and patching, and - Ethics, especially in development, testing and vulnerability disclosure. Learning outcomes: Discuss the implications of relying on open design or the secrecy of design for security. List the three principles of security. Describe why each principle is important to security. Identify the needed design principle. Explain why security requirements are important. Identify common attack vectors. Describe the importance of writing secure and robust programs. Describe the concept of privacy including personally identifiable information. Differentiate between secure coding and patching and explain the advantage of using secure coding techniques."
      },
      {
        "name": "Component Security",
        "description": "The Component Security knowledge area focuses on the design, procurement, testing, analysis, and maintenance of components integrated into larger systems. The security of a system depends, in part, on the security of its components. The security of a component depends on how it is designed, fabricated, procured, tested, connected to other components, used, and maintained. This knowledge area is primarily concerned with the security aspects of the design, fabrication, procurement, testing, and analysis of components. Together with the Connection Security and System Security KAs, the Component Security KA addresses the security issues of connecting components and using them within larger systems. Essentials - Vulnerabilities of system components, - Component lifecycle, - Secure component design principles, - Supply chain management security, - Security testing, and - Reverse engineering. Learning outcomes: Explain how the security of a system’s components might impact the security of the system. Describe ways in which the confidentiality of a component’s design may be compromised. Describe ways to learn information about a component’s functionality with limited information about its design and implementation. List the phases of a component’s lifecycle."
      },
      {
        "name": "Connection Security",
        "description": "The Connection Security knowledge area focuses on the security of the connections between components, including both physical and logical connections. It is critical that every cybersecurity professional have a basic knowledge of digital communications and networking. Connections are how components interact. Much of this material could be introduced through examples, and then abstracting to the essentials and introducing the appropriate vocabulary. The Connection Security KA addresses the security issues of connecting components and using them within larger systems. Essentials - Systems, architecture, models, and standards, - Physical component interfaces, - Software component interfaces, - Connection attacks, and - Transmission attacks. Learning outcomes: Discuss the need for common models and architectures in order to describe systems. Describe a model of systems that consists of components and interfaces for connections. Explain why a component requires at least one interface. List several standards that define models consisting of systems of components and interfaces. Describe the components and interfaces of a networking standard provided. Explain how connection attacks can be understood in terms of attacks on software component interfaces."
      },
      {
        "name": "System Security",
        "description": "The System Security knowledge area focuses on the security aspects of systems that are composed of components and connections, and use software. Understanding the security of a system requires viewing it not only as a set of components and connections, but also as a complete unit in and of itself. This requires a holistic view of the system. The System Security KA addresses the security issues of connecting components and using them within larger systems. Essentials - Holistic approach, - Security policy, - Authentication, - Access control, - Monitoring, - Recovery, - Testing, and - Documentation. Learning outcomes: Explain the concepts of trust and trustworthiness. Explain what is meant by confidentiality, integrity, and availability. Explain what a security policy is, and its role in protecting data and resources. Discuss the importance of a security policy. Explain why different sites have different security policies. Describe an access control list. Describe physical and logical access control, and compare and contrast them. Describe what a penetration test is and why it is valuable. Discuss how to document a test that reveals a vulnerability."
      },
      {
        "name": "Human Security",
        "description": "The Human Security knowledge area focuses on protecting individuals’ data and privacy in the context of organizations (i.e., as employees) and personal life, in addition to the study of human behavior as it relates to cybersecurity. Humans have responsibility to ensure the confidentiality, integrity, and availability (CIA) of their organizational and personal computer systems, while that responsibility is dependent upon each of the Human Security knowledge units outlined below. Essentials - Identity management, - Social engineering, - Awareness and understanding, - Social behavioral privacy and security, and - Personal data privacy and security. Students are required to demonstrate proficiency in each of the essential concepts through achievement of the learning outcomes. Learning outcomes: Explain the difference between identification, authentication, and access authorization of people and devices. Discuss the importance of audit trails and logging in identification and authentication. Demonstrate the ability to implement the concept of least privilege and segregation of duties. Discuss the importance of cyber hygiene, cybersecurity user education, as well as cyber vulnerabilities and threats awareness. Describe the major topics within Security Education, Training, and Awareness (SETA) programs."
      },
      {
        "name": "Organizational Security",
        "description": "The Organizational Security knowledge area focuses on protecting organizations from cybersecurity threats and managing risk to support the successful accomplishment of the organization’s mission. Organizations have responsibility to meet the needs of many constituencies and those needs must inform each of these knowledge units. Students should be able to identify the types of security laws, regulations, and standards within which an organization operates. A government organization has a set of security profiles while a corporate entity has other focuses. Essentials - Risk management, - Governance and policy, - Laws, ethics, and compliance, and - Strategy and planning. Students are required to demonstrate proficiency in each of the essential concepts through achievement of the learning outcomes. Learning outcomes: Describe risk management and its role in the organization. Describe risk management techniques to identify and prioritize risk factors for information assets and how risk is assessed. Differentiate between law and ethics. Describe why ethical codes of conduct are important to cybersecurity professionals and their organizations."
      },
      {
        "name": "Societal Security",
        "description": "The Societal Security knowledge area focuses on aspects of cybersecurity that broadly impact society as a whole for better or for worse. Cybercrime, law, ethics, policy, privacy, and their relation to each other are the key concepts of this knowledge area. The threat of cybercrime across the global society is incredibly serious and growing. Laws, ethics, and policies are vital to the security of corporate and government secrets and assets, as well as to the protection of individual privacy and identity. Essentials - Cybercrime, - Cyber law, - Cyber ethics, - Cyber policy, and - Privacy. Learning outcomes: Discuss various motives for cybercrime behavior. Summarize terror activities in cyberspace geared toward generating societal fear and certainty. Describe methods for investigating both domestic and international crimes. Describe the constitutional foundations of cyber law. Describe international data security and computer hacking laws. Interpret intellectual property laws related to security. Describe ways in which decision-making algorithms could over-represent or under-represent majority and minority groups in society."
      }
    ]
  },
  "Information systems": {
    "knowledge_areas": [
      {
        "name": "Data and Information Management",
        "description": "The Data and Information Management area comprises competencies related to tools and techniques for managing data with database systems. At the highest level, competencies within this area are related to two questions: (1) how to use a database and (2) how to build a database. Most of this competency area will focus on the classic relational model. In the past several years, driven by evolving functional and non-functional (quality) needs of an organization, alternatives to the classic relational model have emerged. Illustrative samples will be examined of these popular alternatives known as non-relational or NoSQL models. Electives: Following the trend toward big data and analytics, there is increasing need for professionals in this area and thus opportunities for specialization. While specialized programs exist that produce data scientists, this area has also emerged as an important area for graduates from IS programs."
      },
      {
        "name": "Data and Business Analytics",
        "description": "Big Data is differentiated from traditional data in terms of the three ‘V’s: volume, velocity, and variety. When data are processed at the terabyte and petabyte level (volume) what fundamental shift in the approach to solving problems occurs? Given the fast transmission and computational speeds of current systems (velocity), what new capabilities are enabled by the processing of huge amounts of data in real time? Estimates are that more than 90% of the world’s data is not structured (variety); what type of new actionable insights are facilitated by the processing of semi-structured (e.g., csv, JSON) and unstructured (e.g., text, images, audio) data? To answer these questions, graduates will need data driven actionable competencies, such as (1) apply the principles of computational thinking (CT) to learning data science, (2) analyze data science problems with a CT framework, (3) express a business problem as a data problem, (4) perform exploratory data analysis from inception to the value proposition, (5) explain the core principles behind various analytics tasks such as classification, clustering, optimization, recommendation, (6) articulate the nature and potential of Big Data, and (7) demonstrate the use of big data tools on real world case-studies."
      },
      {
        "name": "Data and Information Visualization",
        "description": "The Data and Information Visualization competency area contains competencies pertaining to computational approaches for gaining insight via visualizations. Competencies in this area emphasize the fundamentals of statistical exploration of data, fitting models to produce specialized graphs to support the exploration of data in a detailed and statistics-oriented manner, and the use of data visualization tools such as Excel, Python, R, and Tableau. Naturally, these three areas should not be considered as providing an exhaustive coverage necessary for acute specialization. Rather, they are provided as illustrative examples, where specialization should be supported and augmented with competencies from other disciplines related to mathematics. Whether a program provides this additional support directly or indirectly would be a localized choice."
      },
      {
        "name": "IT Infrastructure",
        "description": "IT infrastructure area covers all aspects of information technology infrastructure, as it is used in the organization. IT infrastructure includes the design and development of suitable architectures or servers, physical and cloud services, capacity planning, and networking. The content covers the installation, configuration, maintenance, and management of all aspects of technology from the server through to the organization’s network. A basic understanding of Enterprise Architecture in the context of IT Infrastructure is also needed."
      },
      {
        "name": "Secure Computing",
        "description": "The Secure Computing area is concerned with practices associated with assuring secure business operations in the context of adversaries. Assuring secure operations involves the creation, operation, defense, analysis, and testing of secure computer systems. Hence secure computing is an interdisciplinary area including aspects of computing, law, policy, human factors, ethics, and risk management. The proposed competencies cover these areas, but with an IS discipline lens. This includes data security, software security, human security, societal security, and organization security. Following the need for an increased focus on infrastructure and security, the need for dedicated professionals in IT and security consultancy provides a basis for further specialization. While dedicated programs exist to produce cybersecurity specialists, IS auditing and security are important related areas of need and demand for job placement of IS graduates. For building IS competencies in this specialization, we propose one elective, to focus on Emerging Technologies."
      },
      {
        "name": "Emerging Technologies",
        "description": "The Emerging Technologies area examines emerging technologies and explores their impact on business and societal issues through a business and theoretical lens. A range of technologies is identified and evaluated based on a range of business requirements based on a variety of ethical, environmental, and sustainability perspectives. Technologies are practically applied to enable suitable business opportunities."
      },
      {
        "name": "Systems Analysis and Design",
        "description": "Systems Analysis and Design area examines various systems development methodologies and modeling tools with an emphasis on object-oriented systems development methods, software development life cycle (SDLC), and agile software development while emphasizing analytical techniques to develop the correct definition of business problems and user requirements. Topics should also include design, project management standards, information gathering, effective communication, and interpersonal skill development."
      },
      {
        "name": "Application Development and Programming",
        "description": "The Application Development and Programming area comprises two facets: Programming and Application Development: Application Development is the purposeful application of programming fundamentals to craft usable and useful software artifacts and systems to solve actionable business and organizational problems where the power and automation of computing and data processing is warranted. Elements of design, to include reconciliation between human social systems and data and IS, support a software/systems development life cycle where the industry and craft software realization extend capabilities of software and programming code elements and our understanding of fit and resonance with the human end-users of these systems. Programming is the language of computation and logic that sequences and orders instructions to computing hardware in a manner that realizes both correct results and discernable results. Logical structures, algorithms, arithmetic facilities, and the ability to input, store, transform, and output data that can be purposefully used to inform decisions and automated intentional processes are at the heart of learning to program."
      },
      {
        "name": "Object-Orientation",
        "description": "The Object-Orientation area focuses on software implementations that extend beyond simple utilization of programming constructs and move toward the utilization of modular components often built against paradigmatic best practices for extensible and manageable construction. Programming paradigms are often idiomatic and construe epistemological values about the structuring of applications, reusable code libraries and patterns that lead to architectural decisions. Object-Orientation is a paradigmatic perspective on how to organize data and routines into libraries of reusable code centered on organization of data and routines into containers called classes (for specification) and objects (for instantiation). As such, the focus here is on manifested applications that extend from design to implementation whereas systems analysis and design stops short, in most cases, of implementation. Object-oriented programming requires baseline competencies related to (1) Fundamental elements of objects and classes, (2) Instantiation modalities, (3) Intra-entity communication and messaging, (4) Encapsulation, (5) Inheritance and dependency management, (6) Abstraction, (7) Polymorphism, (8) Design Patterns, and (9) Modeling."
      },
      {
        "name": "Mobile Development",
        "description": "The Mobile development area focuses on the features and upcoming trends of the common mobile platforms to develop a mobile application that uses a web services backend to synchronize and centrally store user data. Topics include but not limited to human interface guidelines for mobile development, tools required for mobile application development in different mobile platforms. For mobile development, graduates need to (1) Understand the Internet of Things (IoT) enabled devices and the mobile industry, (2) Create and analyze an algorithm for effectiveness and efficiency, (3) Implement good documentation practices in programming, (4) Demonstrate teamwork, interpersonal group skills, and team software development, (5) Develop skills in commonly used mobile development languages like Kotlin, Java, JavaScript, C#, Objective-C, HTML5, Swift, (6) Create a functioning mobile application suitable for portfolio presentation including but not limited to skills shown using database management, hardware interaction, APIs, cross platform development and current mobile development tools, (7) Gain knowledge of different mobile development platforms, (8) Understand mobile user interface design and the user experience, (9) Understand how to implement cyber security measures for a mobile application, (10) Implement an understanding of memory allocation and (13) Learn how to market and publish a mobile application."
      },
      {
        "name": "Web Development",
        "description": "The Web development area requires students to understand the concepts of web application design and programming by learning the tools used to create client-side and server-side programs. To design and implement a web site using current standards and best practices requires students to (1) Understand how the Internet works, (2) Create and analyze an algorithm for effectiveness and efficiency, (3) Implement good documentation practices in programming, (4) Demonstrate teamwork, interpersonal group skills, and team software development, (5) Develop skills in client-side (Front-end) web application development technologies including HTML, CSS, JavaScript, and JavaScript libraries, (6) Develop skills in server-side (back-end) web application development technologies using a back-end programming language (i.e., Node/Express, Python/Django, etc.), (7) Create a functioning web application suitable for portfolio presentation including but not limited to skills shown using front-end, back-end, SQL, and current web development tools, (8) Gain knowledge of different internet design patterns (i.e. MVC, MVVM, etc.) and ability to know advantages and disadvantages of each."
      },
      {
        "name": "User Interface Design",
        "description": "The User Interface Design competency area emphasizes concepts and principles of user interface design, design, and evaluation of user experiences (UX), and usability. Competencies include psychological and interaction principles, requirements analysis, designing for different screens, typography, symbols, color, graphics, and other visual language components. Competencies in this area also include needs identification, system capabilities, and an understanding of physical and mental limitations."
      },
      {
        "name": "IS Ethics, Sustainability, Use and Implications for Society",
        "description": "The IS Ethics, Sustainability, Use and Implications for Society area is concerned with practices associated with the ethical use of information systems and the ethical use of the information and data captured by such systems; designing, implementing, and using computing resources in a sustainable environmentally conscious manner; and competencies associated with how information systems may be used and created for the benefit of society. The area comprises two facets: Ethics and IS sustainability. Ethics, within the information systems ecosystem, reflects agreed moral codes of practices and control associated with the use of information systems through the collection of data, the creation and storage, and its sharing of information. The information system practitioner must be cognizant of these ethical codes and its implications for society. IS sustainability, through its design, implementation, and use of computing resources, reflects an imperative that such systems and their data sources must be adaptable, relevant to all stakeholders, and support the maintenance of data captured by such systems."
      },
      {
        "name": "IS Management and Strategy",
        "description": "The IS Management and Strategy area includes the capability to develop, maintain, and consistently improve the systems to deliver the information necessary for an organization. The capability focuses on creating value for an organization and on the IS staff motivation, performance, and accountability. IS Strategy emphasizes the competency to create long-term plans for implementing and using organizational information systems to achieve strategic organizational goals and objectives. This area also covers monitoring and controlling organizational IS resources to ensure alignment with and achievement of strategies, goals, and objectives."
      },
      {
        "name": "Digital Innovation",
        "description": "The Digital Innovation area focuses on competencies needed in the deployment of information technologies to innovate and transform organizational processes and value offerings (products and services). To participate in such innovation processes, graduates need competencies related to how digital innovations are being created, distributed, and commercialized. This requires understanding of both theoretical and practical aspects of emerging and existing digital innovation, their potential impact, disruption, and transformation on business and society. Graduates will need to be able to (1) Articulate and critically reflect on the unique features that an application of emerging technology may offer, (2) Demonstrate knowledge of the role of digital business technologies in social and mobile domains, (3) Identify and critique characteristics necessary for digital innovation, (4) Identify and validate an opportunity to develop a new digital business model, (5) Identify and evaluate key issues related to implementation and infrastructure issues, (6) Identify and assemble the required resources, processes, and partners to bring a digital business model to fruition, and (7) Practically demonstrate the investigation and application of a new innovation."
      },
      {
        "name": "Project Management",
        "description": "The Project Management area provides an understanding of the concepts of project management and appropriate project management techniques in dealing with IS management. Topics include principles of project management, project management functions, project management processes, selecting an appropriate project management methodology, agile software development principles, and scrum. Emphasis is placed on understanding and gaining practical knowledge of key project management skills: integration management, scope management, time management, cost management, quality management, human resource management, communications management, and risk management. Emphasis is also placed on understanding iterative development processes and decision criteria for choosing between planned and agile project management approaches. To contribute to project management, students need to learn the tools, techniques, and processes to manage project performance along with moving from one phase to another until the closure of the project."
      },
      {
        "name": "IS Practicum",
        "description": "The IS Practicum area is an applied synthesis of foundational courses related to exercising design and applying one or more media of construction to effect and implement an IS artifact to suit client or organizational needs. Emphasis on the application of data management, application development, IT infrastructure, and IT Project Management. Students work in teams and apply a software/systems development paradigm toward the development of a system prototype to satisfy the intentions and needs of an organizational client. Client interaction, often best facilitated via the use of Agile software methods, must be sustained and ongoing such that emergence in design and development can be experienced."
      }
    ]
  },
  "Software Engineering": {
    "knowledge_areas": [
      {
        "name": "Software Requirements",
        "description": "Identify and document software requirements by applying a known requirements elicitation technique in work sessions with stakeholders, using facilitative skills, as a contributing member of a requirements team. Analyze software requirements for consistency, completeness, and feasibility, and recommend improved requirements documentation. Specify software requirements using standard specification formats and languages that have been selected for the project and be able to describe the requirements in an understandable way to non-experts. Verify and validate the requirements using standard techniques, including inspection, modeling, prototyping, and test case development. Follow process and product management procedures that have been identified for the project."
      },
      {
        "name": "Software Design",
        "description": "Present architecturally significant requirements from a software requirements specification document to business decision-makers. Evaluate and compare tradeoffs from alternative design possibilities for satisfying functional and non-functional requirements and write a brief proposal summarizing key conclusions. Produce a high-level design of specific subsystems considering architectural and design patterns. Produce detailed designs for a client for specific subsystem high-level designs by using design principles and cross-cutting aspects. Evaluate software testing considerations of quality attributes in the design of subsystems and modules. Create software design documents that communicate effectively to software design clients."
      },
      {
        "name": "Software Construction",
        "description": "Design and implement an API using an object-oriented language and extended libraries, including parameterization and generics on a small project. Evaluate a software system against modern software practices such as defensive programming, error and exception handling, accepted fault tolerances, in a runtime mode. Develop a distributed cloud-based system that incorporates grammar-based inputs and concurrency primitives for a medium-size project and conduct a performance analysis to fine-tune the system."
      },
      {
        "name": "Software Testing",
        "description": "Perform an integrative test and analysis of software components using black-box and use case techniques in collaboration with clients. Conduct a regressive test of software components considering operational profiles and quality attributes. Conduct a test utilizing appropriate testing tools focused on desirable quality attributes. Plan and conduct the process to design test cases for an organization using both clear- and black-box techniques to measure quality metrics in terms of coverage and performance."
      },
      {
        "name": "Software Sustainment",
        "description": "Describe the criteria for transition into sustainment status and assist in identifying applicable systems and software operational standards. Relate to the needs of operational support personnel for documentation and training and help develop software transition documentation and operational support training materials. Help in determining the impacts of software changes on the operational environment. Describe the elements of software support activities such as configuration management, operational software assurance, help desk activities, operational data analysis, and software retirement. Perform software support activities and interact effectively with other software support personnel. Assist in implementing software maintenance processes and plans and make changes to software to implement maintenance needs and requests."
      },
      {
        "name": "Software Process and Life Cycle",
        "description": "Engage with a team to translate a software development process into individual areas of responsibility. Commit to and perform tasks related to assigned or agreed-upon areas of responsibility. Propose and justify software lifecycle process improvements based on team capacity, project progress data, and quality analysis as part of a software development team's retrospective activities."
      },
      {
        "name": "Software Systems Engineering",
        "description": "Provide a description of system engineering concepts and activities to identify problems or opportunities, explore alternatives, create models, and test them. Develop the big picture of a system in its context and environment to simplify and improve system architectures for supporting system designers. Develop interfaces, which interact with other subsystems. Work effectively with engineers and developers from other disciplines to ensure effective interaction."
      },
      {
        "name": "Software Quality",
        "description": "Distinguish quality attributes that are discernable at run-time (performance, security, availability, functionality, usability), from those not discernable at run-time (modifiability, portability, reusability, integrability, and testability) and those related to intrinsic qualities of architecture and detailed design. Design, coordinate, and execute software quality assurance plans for small software subsystems and modules. Perform peer code reviews for evaluating quality attributes that are not discernable at run-time. Explain the statistical nature of quality evaluation when performed on software execution and analyze statistics on outcome data. Interact with external entities including clients, users, and auditing agencies in conveying quality goals for processes and products."
      },
      {
        "name": "Software Security",
        "description": "Apply the project’s selected security lifecycle model as a contributing member of a project team. Identify security requirements by applying the selected security requirements method. Incorporate security requirements into architecture, high-level, and detailed design. Develop software using secure coding standards. Execute test cases that are specific to security. Adhere to the project’s software development process. Develop software that supports the project’s quality goals and adheres to quality requirements."
      },
      {
        "name": "Software Safety",
        "description": "Describe the principal activities with the development of software systems, which involve safety concerns. Create and verify preliminary hazard lists; perform hazard and risk analyses, identify safety requirements. Implement and verify design solutions, using safe design and coding practices, to assure that hazards are mitigated and safety requirements are met. Be aware of the consequences of the development of unsafe software."
      },
      {
        "name": "Software Measurement",
        "description": "Develop and implement plans for the measurement of software processes and work products using appropriate methods, tools, and abilities."
      },
      {
        "name": "Project Management",
        "description": "Explain the principal elements of management for a small project team. Assist in the managerial aspects of a small project team, including software estimation, project planning, tracking, staffing, resource allocation, and risk management. Develop and implement plans for the measurement of software processes and work products using appropriate methods and tools."
      },
      {
        "name": "Behavioral Attributes",
        "description": "Engage with team members to collaborate in solving a problem, effectively applying oral and/or written communication skills. Assist in the analysis and presentation of a complex problem, considering the needs of stakeholders from diverse cultures. Analyze software employment contracts from various social and legal perspectives. Locate and make sense of learning resources, and reflect upon one’s learning to expand knowledge and skills."
      }
    ]
  },
  "Computer Engineering": {
    "knowledge_areas": [
      {
        "name": "CE-CAE Circuits and Electronics",
        "description": "Purpose and role of circuits and electronics in computer engineering, including key differences between analog and digital circuits, their implementations, and methods of approximating digital behavior with analog systems. Definitions and representations of basic electrical quantities and elements, as well as the relationships among them. Analysis and design of simple electronic circuits using appropriate techniques, including software tools, and incorporating appropriate constraints and tradeoffs. Properties of materials that make them useful for constructing electronic devices. Properties of semiconductor devices, their use as amplifiers and switches, and their use in the construction of a range of basic analog and logic circuits. Effects of device parameters and various design styles on circuit characteristics, such as timing, power, and performance. Practical considerations and tradeoffs associated with distributing signals within large circuits and of interfacing between different logic families or with external environments."
      },
      {
        "name": "CE-CAE Computing Algorithms",
        "description": "Fundamental algorithmic design principles. Analysis of algorithmic behavior, including tradeoffs between algorithms. Classic algorithms for such common tasks as searching and sorting. Design and analysis of application-specific algorithms. Characteristics of parallel algorithms."
      },
      {
        "name": "CE-CAO Computer Architecture and Organization",
        "description": "History of computer architecture, organization, and its role in computer engineering. Standards and design tools used in computer architecture and organization. Instruction set architectures, including machine and assembly level representations and assembly language programming. Computer performance measurement, including performance metrics and benchmarks and their strengths and weaknesses. Arithmetic algorithms for manipulating numbers in various number systems. Computer processor organization and tradeoffs, including data path, control unit, and performance enhancements. Memory technologies and memory systems design, including main memory, cache memory, and virtual memory. Input/output system technologies, system interfaces, programming methods, and performance issues. Multi/many-core architectures, including interconnection and control strategies, programming techniques, and performance. Distributed system architectures, levels of parallelism, and distributed algorithms for various architectures."
      },
      {
        "name": "CE-DIG Digital Design",
        "description": "Digital design basics: number representation, arithmetic operations, Boolean algebra, and their realization as basic logic circuits. Building blocks: combinational, sequential, memories, and elements for arithmetic operations. Hardware Description Languages (HDLs), digital circuit modeling, design tools, and tool flow. Programmable logic platforms (e.g., FPGAs) for implementing digital systems. Datapaths and control units composed of combinational and sequential building blocks. Analysis and design of digital systems including design space exploration, and tradeoffs based on constraints such as performance, power, and cost."
      },
      {
        "name": "CE-ESY Embedded Systems",
        "description": "Purpose and role of embedded systems in computer engineering, along with important tradeoffs in such areas as power, performance, and cost. Embedded systems software design, either in assembly language or a high-level language or both, for typical embedded systems applications using modern tools and approaches for development and debugging. Digital interfacing using both parallel and asynchronous/synchronous serial techniques incorporating typical on-chip modules such as general purpose I/O, timers, and serial communication modules (e.g., UART, SPI, I2C, and CAN). Analog interfacing using analog-to-digital converters connected to common sensor elements and digital-to-analog converters connected to typical actuator elements. Mobile and wireless embedded systems using both short-range (e.g., Bluetooth, 802.15.4) and long-range (e.g., cellular, Ethernet) in various interconnection architectures."
      },
      {
        "name": "CE-NWK Computer Networks",
        "description": "Development history of computer network, network hierarchy and the important role of computer network in the computer industry. Related standards and common tools (e.g., tools for performance evaluation and network topology) used in research of computer networks. Architecture of computer networks, the OSI model, and the TCP/IP model. Fundamentals and technologies in data communication and transfer protocols of the physical layer and the data link layer. LAN networking, protocols of the MAC layer, and concepts and features of WAN. The network layer, the transport layer, the application layer, and typical network applications, such as e-mail, www, and ftp. Tradeoffs associated with various network architectures and protocols. Basic concepts, purposes, and common protocols of network management. Features and networking technologies of wireless sensor networks."
      },
      {
        "name": "CE-PPP Preparation for Professional Practice",
        "description": "The importance of effective communication among professionals and other diverse audiences. The significance of leadership and professional interaction when functioning within an interdisciplinary team. The professional and ethical responsibilities of practicing computer engineers and the effects of their work on society. The importance of understanding contemporary issues, lifelong learning strategies, and legal and intellectual property issues. The importance of business acumen and skill in managing projects in the computer engineering field."
      },
      {
        "name": "CE-SEC Information Security",
        "description": "Recognition that security is risk management and inherently includes tradeoffs. Familiarity with the implications of hostile users, including social engineering attacks and misuse cases. Framework for understanding algorithms and other technological measures for enhancing security. Strategic and tactical design issues in information security."
      },
      {
        "name": "CE-SGP Signal Processing",
        "description": "Need for and tradeoffs made when sampling and quantizing a signal. Linear, time-invariant system properties. Frequency as an analysis domain complementary to time. Filter design and implementation. Control system properties and applications."
      },
      {
        "name": "CE-SPE Systems and Project Engineering",
        "description": "The role of systems engineering principles throughout a computer system’s life cycle, including important tradeoffs in such areas as power, performance, and cost. Project management, including team management, scheduling, project configuration, information management, and design of project plans. Human-computer interaction styles and usability requirements, design of user interfaces, and input/output technologies. Analysis and design to produce desired levels of risk, dependability, safety, and fault tolerance in computer-based systems. System requirements and methods for eliciting and analyzing requirements for a computer-based system. System specifications, their relationship to requirements and system design, and methods for developing and evaluating quality specifications for computer-based systems. System architectural design and evaluation, including tools and methods for modeling, simulating, and evaluating system designs at the architectural level. Methods and tools for concurrent hardware and software design, system integration, testing, and validation, including unit and system level test plans. Design for manufacturability, sustainability, and maintainability throughout the product life cycle."
      },
      {
        "name": "CE-SRM System Resource Management",
        "description": "Management of resources in computing systems with diverse components. Real-time operating constraints and their effect on system resource management. Resource management in mobile environments. Tradeoffs associated with resource management in different operating environments."
      },
      {
        "name": "CE-SWD Software Design",
        "description": "Programming paradigms and constructs. Data structures and use of standard library functions for manipulating them. Object oriented design and the use of modeling languages. Testing and software quality concepts. Tradeoffs among different software design methods."
      }
    ]
  },
  "Data Science": {
    "knowledge_areas": [
      {
        "name": "Analysis and Presentation (AP)",
        "description": "Recognize the main strands of knowledge underpinning approaches to Analysis and Presentation. Summarize the skills and techniques (including tools) that can be employed in addressing each of the challenges of Analysis and Presentation to create efficient and effective interfaces. Apply a critical demeanor but also confidence and creativity regarding all aspects of the human computer interface. Execute the selection of tools appropriate for the size of the data/Big Data to be rendered. Importance of effectively presenting data, models, and inferences to clients in oral, written, and graphical formats. Visualization techniques for exploring data and making inferences, as well as for presenting information to clients. Effective visualizations for different types of data, including time-varying data, spatial data, multivariate data, high-dimensional multivariate data, tree- or graph-structured data, discrete/continuous data, and text. Knowing the audience: the client or audience for a data science project is not, in general, another data scientist. Human-Computer Interface considerations for clients of data science products."
      },
      {
        "name": "Artificial Intelligence (AI)",
        "description": "Major subfields of AI. Representation and reasoning. Planning and problem solving. Ethical considerations. Describe major areas of AI as well as contexts in which AI methods may be applied. Represent information in a logic formalism and apply relevant reasoning methods. Represent information in a probabilistic formalism and apply relevant reasoning methods. Be aware of the wide range of ethical considerations around AI systems, as well as mechanisms to mitigate problems."
      },
      {
        "name": "Big Data Systems (BDS)",
        "description": "Problems of scale and the implications of Big Data on computation requirements. Theoretical and methodological issues employed in the context of Big Data. Appropriate algorithms to harness the processing power of the cluster. Approaches to simplifying the programming interface used in developing Big Data applications. Describe the main strands of knowledge needed to address Big Data applications, highlighting areas where collaboration is desirable. Provide familiarity with a range of skills that may be used in the implementation of Big Data applications. Instil confidence in dealing with the problems of Big Data."
      },
      {
        "name": "Computing and Computer Fundamentals (CCF)",
        "description": "Digital representation of data. Processors. Memory management. Operating system functions and vulnerabilities. File organization. Network structure and communication. Web programming. Compilers vs interpreters. Appreciate ways in which digital representations of data affect efficiency and precision. Recognize that there are different types of processors and configurations of them. Understand the trade-offs between expensive/fast memory and inexpensive/slower memory. Summarize the important role of an operating system and the ways in which it is both vulnerable to and can be protected from attack. Carry out the creation, organization, and protection of files. Understand at a high level how networks are organized and transmit information. Recognize the web as an application layer on the internet. Use the web to gather information and build useful applications. Understand that while compilers and interpreters are both translators of code, they have relative benefits and limitations."
      },
      {
        "name": "Data Acquisition, Management, and Governance (DG)",
        "description": "Shaping data and their relationships. Acquiring data from the physical world and extracting data to a form suitable for analysis. Traditional Data Integration Methods: Pattern Mapping, Data Matching, Entity Recognition. Integrating heterogeneous data sources. Pre-processing and cleaning data for applications. Improving data quality. Ensuring data integrity including privacy and security. Construct a data governance process according to the requirements of applications, including data preparation algorithms and steps. (Process Construction and Tuning) Write semantics rules for data governance, including information extraction, data integration, and data cleaning (Rules Definition). Develop scalable and efficient algorithms for data governance according to the requirements of applications (including data extraction, integration, sampling, reduction, data compression, transformation, and cleaning algorithms (Algorithm Development)). Diagram the static and dynamic properties of data, changing mechanisms of data, and similarity between data. (Property Description and Discovery). Develop policies and processes to ensure the privacy and security of data."
      },
      {
        "name": "Data Mining (DM)",
        "description": "Data mining and its relationship to data preparation and data management. Data mining models for a variety of data types and applications. Selection and application of data mining algorithms for various tasks. Equip students with knowledge about the range of techniques available for mining data as well as the related algorithms and their suitability. Equip students with the ability to identify and use tools and techniques for mining data which may exist in various forms. Engender in students a high level of well-founded confidence in mining data."
      },
      {
        "name": "Data Privacy, Security, Integrity, and Analysis for Security (DP)",
        "description": "Interdisciplinary trade-offs of privacy and security. Individual rights and impact on needs of society. Technologies to safeguard data privacy. Relationships between individuals, organizations, and governmental privacy requirements. Cryptographic concepts: Encryption/decryption, message authentication, data integrity, non-repudiation; Attack classification (ciphertext-only, known plaintext, chosen plaintext, chosen ciphertext); Secret key (symmetric), cryptography, and public-key (asymmetric) cryptography. Threat models for data-driven applications. The role mathematical techniques play in producing useful encryption knowledge. Public key cryptography for data security. The data security part of the CSEC 2017 document provides additional scope. The accuracy, consistency, and validity of data. Need for integrity requirements from the security perspective. Techniques and mechanisms to ensure data integrity. Common security threats in data integrity. Understand security data telemetry and different security applications. Statistical analysis for security telemetry data. Machine learning for security telemetry data. Explainable machine learning methods for security-critical applications. Machine learning vulnerability and robustness. Justify the concept of privacy, including the societal definition of what constitutes personally private information and the trade-offs between individual privacy and security. Summarize the trade-off between the rights to privacy by the individual versus the needs of society. Evaluate common practices, technologies, and tools that reduce the risk of data breaches and safeguard data privacy. Debate how organizations with international engagement must consider variances in privacy laws, regulations, and standards across the jurisdictions in which they operate. Describe the purpose of cryptography and list ways it is used in data communications; and which cryptographic protocols, tools, and techniques that are appropriate for a given situation. Understand cipher, cryptanalysis, cryptographic algorithm, and cryptology. Explain how public key infrastructure supports digital signing and encryption and discuss the limitations/vulnerabilities. Exhibit a mathematical understanding behind encryption algorithms. Explain the difference between, and applications of, Symmetric and Asymmetric ciphers. Analyze threats to real-time applications that consume/produce critical data. Utilize attack vectors and attack tree concepts to model threats. Explain how data transmissions over a network or the web can be protected. Explain the differences of data integrity, data security, and data privacy. Describe the main strands of knowledge needed to address data integrity. Demonstrate the skills to apply commonly-used methods to ensure data integrity. Perform confidently when dealing with security threats affecting data integrity. Categorize different security-critical applications and understand various security telemetry data. Demonstrate in-depth knowledge and strong hands-on implementation skills in machine learning (ML) and statistical methods to improve security applications. Recognize when ML explainability and resiliency are necessary in a security application."
      },
      {
        "name": "Machine Learning (ML)",
        "description": "Broad categories of machine learning approaches (e.g., supervised and unsupervised). Algorithms and tools (i.e., implementations of those algorithms) for machine learning. Machine Learning as a set of principled algorithms (e.g., optimization algorithms), rather than as a “bag of tricks.” Challenges (e.g., overfitting) and techniques for approaching those challenges. Performance metrics. Training and testing methodology. Algorithmic and data bias, integrity of data, and professional responsibility for fielding learned models. Recognize the breadth and utility of machine learning methods. Compare and contrast machine learning methods. Select appropriate (classes of) machine learning methods for specific problems. Use appropriate training and testing methodologies when deploying machine learning algorithms. Explain methods to mitigate the effects of overfitting and curse of dimensionality in the context of machine learning algorithms. Identify an appropriate performance metric for evaluating machine learning algorithms/tools for a given problem. Recognize problems related to algorithmic and data bias, as well as privacy and integrity of data. Debate the possible effects -- both positive and negative -- of decisions arising from machine learning conclusions."
      },
      {
        "name": "Professionalism (PR)",
        "description": "Scope: The meaning of competency and being able to demonstrate competency. The acquisition of competencies particularly relevant to the data scientist. Acquiring expertise / mastery or extending competency; the role of journals, conferences, courses, webinars. Technological change and its impact on competency. The role of professional societies in CPD and professional activity. Competencies: Recognise the range of knowledge that underpins a professional approach to data science. Demonstrate the skills that underpin a current and ongoing professional approach to data science. Construct a set of dispositions that underpin a confident, effective and professional approach to all aspects of data science as well as the wherewithal to maintain such an approach."
      },
      {
        "name": "Programming, Data Structures, and Algorithms (PDA)",
        "description": "Scope: Problem solving through algorithmic thinking. Development and implementation of programs, including integration with various existing software and/or tools. Use of traditional programming languages to integrate existing interfaces between datasets and applications. Use of a programming language designed for statistical computing in the context of a data science problem. Knowledge and use of Abstract Data Types (ADTs). Knowledge and use of numerical computing algorithms. Algorithm design and analysis. Factors that influence algorithmic complexity and performance. Complexity analysis and comparison. Competencies: Design an algorithm in a programming language to solve a small or medium size problem. Write clear and correct code in a programming language that includes primitive data types, references, variables, expressions, assignments, I/O, control structures, functions, and recursion. Implement good documentation practices in programming. Use techniques of decomposition to modularize a program. Use standard libraries for a given programming language. Write appropriate database queries. Select appropriate data structures for a given problem. Select appropriate algorithms for a given problem. Discuss the importance of time and space complexity on the practical utility of an algorithm."
      },
      {
        "name": "Software Development and Maintenance (SDM)",
        "description": "Scope: Software engineering principles, including design, implementation and testing of programs. Potential vulnerabilities. Competencies: Implement a small software project that uses a defined coding standard. Test code by including security, unit testing, system testing, integration testing, and interface usability."
      }
    ]
  }
}